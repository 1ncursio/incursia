// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Users = sequelize.define('users', {
    email: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    nickname: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    profile: {
      type: DataTypes.STRING,
    },
    introduction: {
      type: DataTypes.STRING,
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    role: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    status: {
      type: DataTypes.STRING,
      defaultValue: "pending",
    },
    token: {
      type: DataTypes.STRING,
      allowNull: false,
    },
  }, {
    tableName: 'users',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Users.associate = (models) => {
    Users.belongsToMany(models.users, {
      through: 'follow',
      foreignKey: 'FollowingId',
      otherKey: 'FollowerId',
      as: 'usersThroughFollows',
    });
    Users.belongsToMany(models.users, {
      through: 'follow',
      foreignKey: 'FollowerId',
      otherKey: 'FollowingId',
      as: 'usersThroughFollowsFollowerId',
    });
    Users.belongsToMany(models.posts, {
      through: 'postlike',
      foreignKey: 'UserId',
      otherKey: 'PostId',
      as: 'postsThroughPostlikes',
    });
    Users.hasMany(models.comments, {
      foreignKey: {
        name: 'userIdKey',
        field: 'UserId',
      },
      as: 'comments',
    });
    Users.hasMany(models.posts, {
      foreignKey: {
        name: 'userIdKey',
        field: 'UserId',
      },
      as: 'posts',
    });
  };

  return Users;
};
