{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useCallback, useState } from 'react';\nimport useSWR from 'swr';\nimport { useRouter } from 'next/router';\nimport { Space, Tooltip, Typography } from 'antd';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { AlertOutlined, DeleteOutlined, HeartFilled, HeartOutlined, ShareAltOutlined } from '@ant-design/icons';\nimport { fetcher } from '@utils/fetcher';\ndayjs.extend(relativeTime);\nconst {\n  Title,\n  Paragraph\n} = Typography;\n\nconst NoticeSection = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const {\n    data: userData\n  } = useSWR('/api/user', fetcher);\n  const {\n    data: noticeData\n  } = useSWR(id ? `/api/post/notice/${id}` : null, fetcher);\n  const onLike = useCallback(() => {\n    if (!userData) {\n      return alert('로그인이 필요합니다.');\n    } // dispatch({ type: LIKE_POST_REQUEST, data: noticeData.id });\n\n\n    return setLiked(prev => !prev);\n  }, [userData, noticeData === null || noticeData === void 0 ? void 0 : noticeData.id]);\n  const onDislike = useCallback(() => {\n    if (!userData) {\n      return alert('로그인이 필요합니다.');\n    } // dispatch({ type: DISLIKE_POST_REQUEST, data: noticeData.id });\n\n\n    return setLiked(prev => !prev);\n  }, [userData, noticeData === null || noticeData === void 0 ? void 0 : noticeData.id]);\n  const onClickDelete = useCallback(() => {}, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Title, {\n      level: 3,\n      children: noticeData === null || noticeData === void 0 ? void 0 : noticeData.title\n    }), /*#__PURE__*/_jsx(Paragraph, {\n      children: noticeData === null || noticeData === void 0 ? void 0 : noticeData.caption\n    }), /*#__PURE__*/_jsx(Tooltip, {\n      title: dayjs(noticeData === null || noticeData === void 0 ? void 0 : noticeData.createdAt).format('YYYY년 MM월 DD일 HH:mm'),\n      children: /*#__PURE__*/_jsx(\"span\", {\n        children: dayjs(noticeData === null || noticeData === void 0 ? void 0 : noticeData.createdAt).fromNow()\n      })\n    }), /*#__PURE__*/_jsxs(Space, {\n      style: {\n        float: 'right'\n      },\n      children: [/*#__PURE__*/_jsx(Tooltip, {\n        title: \"\\uC88B\\uC544\\uC694!\",\n        children: liked ? /*#__PURE__*/_jsx(HeartFilled, {\n          style: {\n            fontSize: 24,\n            opacity: 0.9\n          },\n          onClick: onDislike\n        }) : /*#__PURE__*/_jsx(HeartOutlined, {\n          style: {\n            fontSize: 24,\n            opacity: 0.9\n          },\n          onClick: onLike\n        })\n      }), /*#__PURE__*/_jsx(Tooltip, {\n        title: \"\\uACF5\\uC720\\uD558\\uAE30!\",\n        children: /*#__PURE__*/_jsx(ShareAltOutlined, {\n          style: {\n            fontSize: 24,\n            opacity: 0.9\n          }\n        })\n      }), /*#__PURE__*/_jsx(Tooltip, {\n        title: \"\\uC2E0\\uACE0\\uD558\\uAE30\",\n        children: /*#__PURE__*/_jsx(AlertOutlined, {\n          style: {\n            fontSize: 24,\n            opacity: 0.9\n          }\n        })\n      }), (userData === null || userData === void 0 ? void 0 : userData.id) === (noticeData === null || noticeData === void 0 ? void 0 : noticeData.User.id) && /*#__PURE__*/_jsx(Tooltip, {\n        title: \"\\uC0AD\\uC81C\\uD558\\uAE30\",\n        children: /*#__PURE__*/_jsx(DeleteOutlined, {\n          style: {\n            fontSize: 24\n          },\n          onClick: onClickDelete\n        })\n      })]\n    })]\n  });\n};\n\nexport default NoticeSection;","map":{"version":3,"sources":["C:/programming/nodejs/utopia/client/components/NoticeSection/index.tsx"],"names":["React","useCallback","useState","useSWR","useRouter","Space","Tooltip","Typography","dayjs","relativeTime","AlertOutlined","DeleteOutlined","HeartFilled","HeartOutlined","ShareAltOutlined","fetcher","extend","Title","Paragraph","NoticeSection","router","id","query","liked","setLiked","data","userData","noticeData","onLike","alert","prev","onDislike","onClickDelete","title","caption","createdAt","format","fromNow","float","fontSize","opacity","User"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport useSWR from 'swr';\r\nimport { useRouter } from 'next/router';\r\nimport { Space, Tooltip, Typography } from 'antd';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport { AlertOutlined, DeleteOutlined, HeartFilled, HeartOutlined, ShareAltOutlined } from '@ant-design/icons';\r\nimport { fetcher } from '@utils/fetcher';\r\n\r\ndayjs.extend(relativeTime);\r\n\r\nconst { Title, Paragraph } = Typography;\r\n\r\nconst NoticeSection = () => {\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  const { data: userData } = useSWR('/api/user', fetcher);\r\n  const { data: noticeData } = useSWR(id ? `/api/post/notice/${id}` : null, fetcher);\r\n\r\n  const onLike = useCallback(() => {\r\n    if (!userData) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    // dispatch({ type: LIKE_POST_REQUEST, data: noticeData.id });\r\n    return setLiked((prev) => !prev);\r\n  }, [userData, noticeData?.id]);\r\n\r\n  const onDislike = useCallback(() => {\r\n    if (!userData) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    // dispatch({ type: DISLIKE_POST_REQUEST, data: noticeData.id });\r\n    return setLiked((prev) => !prev);\r\n  }, [userData, noticeData?.id]);\r\n\r\n  const onClickDelete = useCallback(() => {}, []);\r\n\r\n  return (\r\n    <>\r\n      <Title level={3}>{noticeData?.title}</Title>\r\n      <Paragraph>{noticeData?.caption}</Paragraph>\r\n      <Tooltip title={dayjs(noticeData?.createdAt).format('YYYY년 MM월 DD일 HH:mm')}>\r\n        <span>{dayjs(noticeData?.createdAt).fromNow()}</span>\r\n      </Tooltip>\r\n      <Space style={{ float: 'right' }}>\r\n        <Tooltip title=\"좋아요!\">\r\n          {liked ? (\r\n            <HeartFilled style={{ fontSize: 24, opacity: 0.9 }} onClick={onDislike} />\r\n          ) : (\r\n            <HeartOutlined style={{ fontSize: 24, opacity: 0.9 }} onClick={onLike} />\r\n          )}\r\n        </Tooltip>\r\n        <Tooltip title=\"공유하기!\">\r\n          <ShareAltOutlined style={{ fontSize: 24, opacity: 0.9 }} />\r\n        </Tooltip>\r\n        <Tooltip title=\"신고하기\">\r\n          <AlertOutlined style={{ fontSize: 24, opacity: 0.9 }} />\r\n        </Tooltip>\r\n\r\n        {userData?.id === noticeData?.User.id && (\r\n          <Tooltip title=\"삭제하기\">\r\n            <DeleteOutlined style={{ fontSize: 24 }} onClick={onClickDelete} />\r\n          </Tooltip>\r\n        )}\r\n      </Space>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoticeSection;\r\n"]},"metadata":{},"sourceType":"module"}