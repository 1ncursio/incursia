{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\programming\\\\nodejs\\\\utopia\\\\client\\\\components\\\\UserProfile.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback } from 'react';\nimport { Avatar, Button, Typography, Row, Col, Badge, Space } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport useSWR from 'swr';\nimport FollowButton from './FollowButton';\nimport { fetcher } from '@utils/fetcher';\nvar CurrentPostCover = styled.div.withConfig({\n  displayName: \"UserProfile__CurrentPostCover\",\n  componentId: \"sc-18nvfsf-0\"\n})([\"background-color:rgba(255,255,255,0.5);width:100%;height:100%;position:absolute;z-index:10;\"]);\n_c = CurrentPostCover;\nvar Text = Typography.Text;\n\nvar UserProfile = function UserProfile(_ref) {\n  _s();\n\n  var postData = _ref.postData;\n\n  var _useSWR = useSWR('/api/user', fetcher),\n      userData = _useSWR.data;\n\n  useEffect(function () {\n    console.log(postData);\n  }, []);\n  var currentPostIndex = postData.User.Posts.findIndex(function (v) {\n    return v.id === postData.id;\n  });\n  var prevAndCurrentAndNextPost = postData.User.Posts.filter(function (v, i) {\n    return Math.abs(i - currentPostIndex) <= 1;\n  });\n  return /*#__PURE__*/_jsxDEV(Space, {\n    direction: \"vertical\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      href: \"/user/\".concat(postData.User.id, \"/illustration\"),\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          size: 48,\n          src: postData.User.profile && \"http://localhost:3100/\".concat(postData.User.profile),\n          style: {\n            marginRight: 8\n          },\n          children: !postData.User.profile && postData.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Text, {\n          children: postData.User.nickname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, _this), (userData === null || userData === void 0 ? void 0 : userData.id) !== postData.User.id ? /*#__PURE__*/_jsxDEV(FollowButton, {\n      postData: postData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, _this) : /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      shape: \"round\",\n      block: true,\n      onClick: true,\n      children: \"\\uC791\\uD488 \\uD3B8\\uC9D1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 8,\n      children: prevAndCurrentAndNextPost.map(function (post) {\n        return /*#__PURE__*/_jsxDEV(Col, {\n          span: 8,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/illustration/\".concat(post.id),\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: [post.id === postData.id ? /*#__PURE__*/_jsxDEV(CurrentPostCover, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 44\n              }, _this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: '100%',\n                  height: 100\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"http://localhost:3100/\".concat(post.Images[0].src),\n                  alt: post.title,\n                  style: {\n                    width: '100%',\n                    height: '100%',\n                    objectFit: 'cover',\n                    borderRadius: 8\n                  }\n                }, post.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Badge, {\n                  count: post.Images.length,\n                  style: {\n                    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                    position: 'absolute',\n                    right: '5px',\n                    bottom: '25px',\n                    boxShadow: 'none'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, _this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(UserProfile, \"RZ4ta5G199Drl3WjpPT8F6Rgq4U=\", false, function () {\n  return [useSWR];\n});\n\n_c2 = UserProfile;\nUserProfile.propTypes = {\n  postData: PropTypes.object.isRequired\n};\nexport default UserProfile;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CurrentPostCover\");\n$RefreshReg$(_c2, \"UserProfile\");","map":{"version":3,"sources":["C:/programming/nodejs/utopia/client/components/UserProfile.js"],"names":["React","useEffect","useCallback","Avatar","Button","Typography","Row","Col","Badge","Space","Link","PropTypes","styled","useSWR","FollowButton","fetcher","CurrentPostCover","div","Text","UserProfile","postData","userData","data","console","log","currentPostIndex","User","Posts","findIndex","v","id","prevAndCurrentAndNextPost","filter","i","Math","abs","profile","marginRight","nickname","map","post","width","height","Images","src","title","objectFit","borderRadius","length","backgroundColor","position","right","bottom","boxShadow","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport { Avatar, Button, Typography, Row, Col, Badge, Space } from 'antd';\r\nimport Link from 'next/link';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport useSWR from 'swr';\r\nimport FollowButton from './FollowButton';\r\nimport { fetcher } from '@utils/fetcher';\r\n\r\nconst CurrentPostCover = styled.div`\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  z-index: 10;\r\n`;\r\n\r\nconst { Text } = Typography;\r\n\r\nconst UserProfile = ({ postData }) => {\r\n  const { data: userData } = useSWR('/api/user', fetcher);\r\n\r\n  useEffect(() => {\r\n    console.log(postData);\r\n  }, []);\r\n  const currentPostIndex = postData.User.Posts.findIndex((v) => v.id === postData.id);\r\n  const prevAndCurrentAndNextPost = postData.User.Posts.filter((v, i) => Math.abs(i - currentPostIndex) <= 1);\r\n\r\n  return (\r\n    <Space direction=\"vertical\">\r\n      <Link href={`/user/${postData.User.id}/illustration`}>\r\n        <a>\r\n          <Avatar size={48} src={postData.User.profile && `http://localhost:3100/${postData.User.profile}`} style={{ marginRight: 8 }}>\r\n            {!postData.User.profile && postData.User.nickname[0]}\r\n          </Avatar>\r\n          <Text>{postData.User.nickname}</Text>\r\n        </a>\r\n      </Link>\r\n      {userData?.id !== postData.User.id ? (\r\n        <FollowButton postData={postData} />\r\n      ) : (\r\n        <Button type=\"primary\" shape=\"round\" block onClick>\r\n          작품 편집\r\n        </Button>\r\n      )}\r\n      <Row gutter={8}>\r\n        {prevAndCurrentAndNextPost.map((post) => (\r\n          <Col span={8} key={post.id}>\r\n            <Link href={`/illustration/${post.id}`}>\r\n              <a>\r\n                {post.id === postData.id ? <CurrentPostCover /> : null}\r\n                <div style={{ width: '100%', height: 100 }}>\r\n                  <img\r\n                    src={`http://localhost:3100/${post.Images[0].src}`}\r\n                    key={post.id}\r\n                    alt={post.title}\r\n                    style={{ width: '100%', height: '100%', objectFit: 'cover', borderRadius: 8 }}\r\n                  />\r\n                  <Badge\r\n                    count={post.Images.length}\r\n                    style={{ backgroundColor: 'rgba(0, 0, 0, 0.5)', position: 'absolute', right: '5px', bottom: '25px', boxShadow: 'none' }}\r\n                  />\r\n                </div>\r\n              </a>\r\n            </Link>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </Space>\r\n  );\r\n};\r\n\r\nUserProfile.propTypes = {\r\n  postData: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default UserProfile;\r\n"]},"metadata":{},"sourceType":"module"}