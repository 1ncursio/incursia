{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SmileOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, Modal, Popover } from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react'; // @ts-ignore\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport useSWR from 'swr';\nimport { fetcher } from '@utils/fetcher';\nimport PopoverEmoticon from '@components/PopoverEmoticon';\nimport useInput from '@hooks/useInput';\nimport { ADD_COMMENT_REQUEST, ADD_REPLY_REQUEST } from '../../reducers/post';\n\nconst CommentForm = ({\n  placeholder = '',\n  replyId = -1,\n  type,\n  setReplyId,\n  postData,\n  postMutate\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: visiblePopover,\n    1: setVisiblePopover\n  } = useState(false);\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\n  const {\n    addCommentDone,\n    addCommentLoading,\n    addedCommentId,\n    removeCommentDone,\n    removedCommentId\n  } = useSelector(state => state.post);\n  const {\n    data: userData\n  } = useSWR('/api/user', fetcher);\n  useEffect(() => {\n    if (addCommentDone) {\n      if (type === 'comment') {\n        // postMutate(\n        //   {\n        //     ...postData,\n        //     Comments: [\n        //       ...postData.Comments,\n        //       {\n        //         id: addedCommentId,\n        //         replyId: addedCommentId,\n        //         userId: userData.id,\n        //         content: commentText,\n        //         User: {\n        //           id: userData.id,\n        //           nickname: userData.nickname,\n        //           profile: userData.profile,\n        //         },\n        //       },\n        //     ],\n        //   },\n        //   false,\n        // );\n        postMutate();\n        console.log('코멘트 작성');\n      } else if (type === 'reply') {\n        postMutate();\n        console.log('답글 작성');\n      }\n\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  useEffect(() => {\n    if (removeCommentDone) {\n      postMutate(_objectSpread(_objectSpread({}, postData), {}, {\n        Comments: postData.Comments.filter(v => v.id !== removedCommentId)\n      }), false);\n    }\n  }, [removeCommentDone]);\n  const onSubmitComment = useCallback(() => {\n    if (!commentText || !commentText.trim()) {\n      return Modal.error({\n        content: '내용을 작성해주세요.'\n      });\n    }\n\n    if (!userData) {\n      return Modal.error({\n        content: '로그인한 사용자만 접근 가능합니다.',\n        okText: '확인'\n      });\n    }\n\n    if (type === 'comment') {\n      dispatch({\n        type: ADD_COMMENT_REQUEST,\n        data: {\n          content: commentText,\n          postId: postData.id,\n          userId: userData.id,\n          replyId\n        }\n      });\n    } else {\n      dispatch({\n        type: ADD_REPLY_REQUEST,\n        data: {\n          content: commentText,\n          postId: postData.id,\n          userId: userData.id,\n          replyId\n        }\n      });\n    }\n\n    return setReplyId(-1);\n  }, [commentText, userData, addedCommentId, replyId, setReplyId]);\n  return /*#__PURE__*/_jsxs(Form, {\n    onFinish: onSubmitComment,\n    layout: \"inline\",\n    style: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsx(Form.Item, {\n      children: /*#__PURE__*/_jsx(Popover, {\n        trigger: \"click\",\n        placement: \"bottomRight\",\n        title: \"\\uC774\\uBAA8\\uD2F0\\uCF58\",\n        visible: visiblePopover,\n        content: /*#__PURE__*/_jsx(PopoverEmoticon, {\n          setCommentText: setCommentText,\n          setVisiblePopover: setVisiblePopover\n        }),\n        children: /*#__PURE__*/_jsx(SmileOutlined, {\n          style: {\n            fontSize: 22,\n            opacity: 0.7,\n            marginRight: 8\n          },\n          onClick: () => setVisiblePopover(prev => !prev)\n        })\n      })\n    }), /*#__PURE__*/_jsx(Form.Item, {\n      style: {\n        width: '88%',\n        background: 'white'\n      },\n      children: /*#__PURE__*/_jsx(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        placeholder: placeholder,\n        style: {\n          resize: 'none',\n          width: '100%',\n          height: 55\n        },\n        bordered: true\n      })\n    }), /*#__PURE__*/_jsx(Form.Item, {\n      children: /*#__PURE__*/_jsx(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: addCommentLoading,\n        style: {\n          float: 'right',\n          height: 55\n        },\n        block: true,\n        children: \"\\uC791\\uC131\"\n      })\n    })]\n  });\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["C:/programming/nodejs/utopia/client/components/CommentForm/index.tsx"],"names":["SmileOutlined","Button","Form","Input","Modal","Popover","React","useCallback","useEffect","useState","useDispatch","useSelector","useSWR","fetcher","PopoverEmoticon","useInput","ADD_COMMENT_REQUEST","ADD_REPLY_REQUEST","CommentForm","placeholder","replyId","type","setReplyId","postData","postMutate","dispatch","visiblePopover","setVisiblePopover","commentText","onChangeCommentText","setCommentText","addCommentDone","addCommentLoading","addedCommentId","removeCommentDone","removedCommentId","state","post","data","userData","console","log","Comments","filter","v","id","onSubmitComment","trim","error","content","okText","postId","userId","display","justifyContent","alignItems","fontSize","opacity","marginRight","prev","width","background","resize","height","float"],"mappings":"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","sourcesContent":["import { SmileOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, Modal, Popover } from 'antd';\r\nimport React, { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react';\r\n// @ts-ignore\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useSWR from 'swr';\r\nimport { fetcher } from '@utils/fetcher';\r\nimport PopoverEmoticon from '@components/PopoverEmoticon';\r\nimport useInput from '@hooks/useInput';\r\nimport { IPost } from '@typings/IPost';\r\nimport { ADD_COMMENT_REQUEST, ADD_REPLY_REQUEST } from '../../reducers/post';\r\n\r\ninterface Props {\r\n  placeholder?: string;\r\n  replyId?: number;\r\n  type: string;\r\n  setReplyId: Dispatch<SetStateAction<number>>;\r\n  postData: IPost;\r\n  postMutate: any;\r\n}\r\n\r\nconst CommentForm = ({ placeholder = '', replyId = -1, type, setReplyId, postData, postMutate }: Props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [visiblePopover, setVisiblePopover] = useState(false);\r\n\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\r\n\r\n  const { addCommentDone, addCommentLoading, addedCommentId, removeCommentDone, removedCommentId } = useSelector(\r\n    (state: any) => state.post,\r\n  );\r\n\r\n  const { data: userData } = useSWR('/api/user', fetcher);\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      if (type === 'comment') {\r\n        // postMutate(\r\n        //   {\r\n        //     ...postData,\r\n        //     Comments: [\r\n        //       ...postData.Comments,\r\n        //       {\r\n        //         id: addedCommentId,\r\n        //         replyId: addedCommentId,\r\n        //         userId: userData.id,\r\n        //         content: commentText,\r\n        //         User: {\r\n        //           id: userData.id,\r\n        //           nickname: userData.nickname,\r\n        //           profile: userData.profile,\r\n        //         },\r\n        //       },\r\n        //     ],\r\n        //   },\r\n        //   false,\r\n        // );\r\n        postMutate();\r\n        console.log('코멘트 작성');\r\n      } else if (type === 'reply') {\r\n        postMutate();\r\n        console.log('답글 작성');\r\n      }\r\n      setCommentText('');\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  useEffect(() => {\r\n    if (removeCommentDone) {\r\n      postMutate(\r\n        {\r\n          ...postData,\r\n          Comments: postData.Comments.filter((v) => v.id !== removedCommentId),\r\n        },\r\n        false,\r\n      );\r\n    }\r\n  }, [removeCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    if (!commentText || !commentText.trim()) {\r\n      return Modal.error({\r\n        content: '내용을 작성해주세요.',\r\n      });\r\n    }\r\n\r\n    if (!userData) {\r\n      return Modal.error({\r\n        content: '로그인한 사용자만 접근 가능합니다.',\r\n        okText: '확인',\r\n      });\r\n    }\r\n\r\n    if (type === 'comment') {\r\n      dispatch({\r\n        type: ADD_COMMENT_REQUEST,\r\n        data: { content: commentText, postId: postData.id, userId: userData.id, replyId },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_REPLY_REQUEST,\r\n        data: { content: commentText, postId: postData.id, userId: userData.id, replyId },\r\n      });\r\n    }\r\n\r\n    return setReplyId(-1);\r\n  }, [commentText, userData, addedCommentId, replyId, setReplyId]);\r\n\r\n  return (\r\n    <Form\r\n      onFinish={onSubmitComment}\r\n      layout=\"inline\"\r\n      style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}\r\n    >\r\n      <Form.Item>\r\n        <Popover\r\n          trigger=\"click\"\r\n          placement=\"bottomRight\"\r\n          title=\"이모티콘\"\r\n          visible={visiblePopover}\r\n          content={<PopoverEmoticon setCommentText={setCommentText} setVisiblePopover={setVisiblePopover} />}\r\n        >\r\n          <SmileOutlined\r\n            style={{ fontSize: 22, opacity: 0.7, marginRight: 8 }}\r\n            onClick={() => setVisiblePopover((prev) => !prev)}\r\n          />\r\n        </Popover>\r\n      </Form.Item>\r\n      <Form.Item style={{ width: '88%', background: 'white' }}>\r\n        <Input.TextArea\r\n          value={commentText}\r\n          onChange={onChangeCommentText}\r\n          placeholder={placeholder}\r\n          style={{ resize: 'none', width: '100%', height: 55 }}\r\n          bordered\r\n        />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          loading={addCommentLoading}\r\n          style={{ float: 'right', height: 55 }}\r\n          block\r\n        >\r\n          작성\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}