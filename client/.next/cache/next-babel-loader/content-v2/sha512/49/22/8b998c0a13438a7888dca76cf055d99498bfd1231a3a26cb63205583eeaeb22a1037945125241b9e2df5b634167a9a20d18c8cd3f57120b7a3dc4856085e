{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react'; // @ts-ignore\n\nimport { useSelector } from 'react-redux';\nimport { Row, Col, Divider } from 'antd';\nimport useSWR from 'swr';\nimport { useRouter } from 'next/router';\nimport AppLayout from '@components/AppLayout';\nimport PostCard from '@components/PostCard';\nimport { fetcher } from '@utils/fetcher';\nimport ExpiredValidation from '@components/ExpiredValidation';\nimport wrapper from '../../store/configureStore';\n\nconst TagPage = ({\n  posts: initialPosts\n}) => {\n  const router = useRouter();\n  const {\n    tagName\n  } = router.query;\n  const {\n    hasMorePosts\n  } = useSelector(state => state.post);\n  const {\n    data: userData\n  } = useSWR('/api/user', fetcher); // @ts-ignore\n\n  const {\n    data: postsData\n  } = useSWR(`/api/posts/tag/${encodeURIComponent(tagName)}?lastId=0`, fetcher, {\n    initialData: initialPosts\n  });\n\n  if ((userData === null || userData === void 0 ? void 0 : userData.status) === 'pending') {\n    return /*#__PURE__*/_jsx(ExpiredValidation, {});\n  }\n\n  return /*#__PURE__*/_jsx(AppLayout, {\n    children: /*#__PURE__*/_jsx(Row, {\n      justify: \"center\",\n      gutter: 16,\n      children: /*#__PURE__*/_jsx(Col, {\n        span: 18,\n        children: /*#__PURE__*/_jsxs(Row, {\n          gutter: [8, 8],\n          children: [/*#__PURE__*/_jsx(Divider, {\n            orientation: \"left\",\n            children: `${tagName} - 태그 검색 결과`\n          }), postsData === null || postsData === void 0 ? void 0 : postsData.map(post => /*#__PURE__*/_jsx(Col, {\n            span: 4,\n            children: /*#__PURE__*/_jsx(PostCard, {\n              post: post\n            }, post.id)\n          }, post.id))]\n        })\n      })\n    })\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  var _context$params;\n\n  // @ts-ignore\n  const posts = await fetcher(`/api/posts/tag/${encodeURIComponent((_context$params = context.params) === null || _context$params === void 0 ? void 0 : _context$params.tagName)}?lastId=0`);\n  return {\n    props: {\n      posts\n    }\n  };\n});\nexport default TagPage;","map":{"version":3,"sources":["C:/programming/nodejs/utopia/client/pages/tag/[tagName].tsx"],"names":["React","useSelector","Row","Col","Divider","useSWR","useRouter","AppLayout","PostCard","fetcher","ExpiredValidation","wrapper","TagPage","posts","initialPosts","router","tagName","query","hasMorePosts","state","post","data","userData","postsData","encodeURIComponent","initialData","status","map","id","getServerSideProps","context","params","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,OAAnB,QAAkC,MAAlC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,OAAOC,iBAAP,MAA8B,+BAA9B;AAEA,OAAOC,OAAP,MAAoB,4BAApB;;AAMA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,KAAK,EAAEC;AAAT,CAAD,KAAoC;AAClD,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAcD,MAAM,CAACE,KAA3B;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAmBjB,WAAW,CAAEkB,KAAD,IAAgBA,KAAK,CAACC,IAAvB,CAApC;AAEA,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAqBjB,MAAM,CAAQ,WAAR,EAAqBI,OAArB,CAAjC,CANkD,CAOlD;;AACA,QAAM;AAAEY,IAAAA,IAAI,EAAEE;AAAR,MAAsBlB,MAAM,CAAE,kBAAiBmB,kBAAkB,CAACR,OAAD,CAAU,WAA/C,EAA2DP,OAA3D,EAAoE;AACpGgB,IAAAA,WAAW,EAAEX;AADuF,GAApE,CAAlC;;AAIA,MAAI,CAAAQ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEI,MAAV,MAAqB,SAAzB,EAAoC;AAClC,wBAAO,KAAC,iBAAD,KAAP;AACD;;AAED,sBACE,KAAC,SAAD;AAAA,2BACE,KAAC,GAAD;AAAK,MAAA,OAAO,EAAC,QAAb;AAAsB,MAAA,MAAM,EAAE,EAA9B;AAAA,6BACE,KAAC,GAAD;AAAK,QAAA,IAAI,EAAE,EAAX;AAAA,+BACE,MAAC,GAAD;AAAK,UAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAb;AAAA,kCACE,KAAC,OAAD;AAAS,YAAA,WAAW,EAAC,MAArB;AAAA,sBAA8B,GAAEV,OAAQ;AAAxC,YADF,EAEGO,SAFH,aAEGA,SAFH,uBAEGA,SAAS,CAAEI,GAAX,CAAgBP,IAAD,iBACd,KAAC,GAAD;AAAK,YAAA,IAAI,EAAE,CAAX;AAAA,mCACE,KAAC,QAAD;AAAwB,cAAA,IAAI,EAAEA;AAA9B,eAAeA,IAAI,CAACQ,EAApB;AADF,aAAmBR,IAAI,CAACQ,EAAxB,CADD,CAFH;AAAA;AADF;AADF;AADF,IADF;AAgBD,CAhCD;;AAkCA,OAAO,MAAMC,kBAAkB,GAAGlB,OAAO,CAACkB,kBAAR,CAA2B,MAAOC,OAAP,IAAmB;AAAA;;AAC9E;AACA,QAAMjB,KAAK,GAAG,MAAMJ,OAAO,CAAE,kBAAiBe,kBAAkB,oBAACM,OAAO,CAACC,MAAT,oDAAC,gBAAgBf,OAAjB,CAA0B,WAA/D,CAA3B;AACA,SAAO;AAAEgB,IAAAA,KAAK,EAAE;AAAEnB,MAAAA;AAAF;AAAT,GAAP;AACD,CAJiC,CAA3B;AAMP,eAAeD,OAAf","sourcesContent":["import React from 'react';\r\n// @ts-ignore\r\nimport { useSelector } from 'react-redux';\r\nimport { Row, Col, Divider } from 'antd';\r\nimport useSWR from 'swr';\r\nimport { useRouter } from 'next/router';\r\nimport AppLayout from '@components/AppLayout';\r\nimport PostCard from '@components/PostCard';\r\nimport { fetcher } from '@utils/fetcher';\r\nimport { IPost } from '@typings/IPost';\r\nimport ExpiredValidation from '@components/ExpiredValidation';\r\nimport { IUser } from '@typings/IUser';\r\nimport wrapper from '../../store/configureStore';\r\n\r\ninterface Props {\r\n  posts: IPost[];\r\n}\r\n\r\nconst TagPage = ({ posts: initialPosts }: Props) => {\r\n  const router = useRouter();\r\n  const { tagName } = router.query;\r\n\r\n  const { hasMorePosts } = useSelector((state: any) => state.post);\r\n\r\n  const { data: userData } = useSWR<IUser>('/api/user', fetcher);\r\n  // @ts-ignore\r\n  const { data: postsData } = useSWR(`/api/posts/tag/${encodeURIComponent(tagName)}?lastId=0`, fetcher, {\r\n    initialData: initialPosts,\r\n  });\r\n\r\n  if (userData?.status === 'pending') {\r\n    return <ExpiredValidation />;\r\n  }\r\n\r\n  return (\r\n    <AppLayout>\r\n      <Row justify=\"center\" gutter={16}>\r\n        <Col span={18}>\r\n          <Row gutter={[8, 8]}>\r\n            <Divider orientation=\"left\">{`${tagName} - 태그 검색 결과`}</Divider>\r\n            {postsData?.map((post: IPost) => (\r\n              <Col span={4} key={post.id}>\r\n                <PostCard key={post.id} post={post} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  // @ts-ignore\r\n  const posts = await fetcher(`/api/posts/tag/${encodeURIComponent(context.params?.tagName)}?lastId=0`);\r\n  return { props: { posts } };\r\n});\r\n\r\nexport default TagPage;\r\n"]},"metadata":{},"sourceType":"module"}