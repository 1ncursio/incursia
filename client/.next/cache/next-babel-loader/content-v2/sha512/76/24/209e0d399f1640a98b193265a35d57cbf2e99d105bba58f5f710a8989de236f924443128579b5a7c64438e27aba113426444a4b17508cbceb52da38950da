{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\programming\\\\nodejs\\\\utopia\\\\client\\\\components\\\\CommentForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SmileOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, Modal, Popover } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useSWR from 'swr';\nimport { ADD_COMMENT_REQUEST, ADD_REPLY_REQUEST } from '../reducers/post';\nimport { fetcher } from '@utils/fetcher';\nimport useInput from '../hooks/useInput.ts';\nimport PopoverEmoticon from './PopoverEmoticon';\n\nconst CommentForm = ({\n  placeholder,\n  type,\n  replyId,\n  setReplyId,\n  postData,\n  postMutate\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: visiblePopover,\n    1: setVisiblePopover\n  } = useState(false);\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\n  const {\n    addCommentDone,\n    addCommentLoading,\n    addedCommentId,\n    removeCommentDone,\n    removedCommentId\n  } = useSelector(state => state.post);\n  const {\n    data: userData\n  } = useSWR('/api/user', fetcher);\n  useEffect(() => {\n    if (addCommentDone) {\n      if (type === 'comment') {\n        postMutate(_objectSpread(_objectSpread({}, postData), {}, {\n          Comments: [...postData.Comments, {\n            id: addedCommentId,\n            replyId: addedCommentId,\n            userId: userData.id,\n            content: commentText,\n            User: {\n              id: userData.id,\n              nickname: userData.nickname,\n              profile: userData.profile\n            }\n          }]\n        }), false);\n      } else if (type === 'reply') {\n        postMutate();\n      }\n\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  useEffect(() => {\n    if (removeCommentDone) {\n      postMutate(_objectSpread(_objectSpread({}, postData), {}, {\n        Comments: postData.Comments.filter(v => v.id !== removedCommentId)\n      }), false);\n    }\n  }, [removeCommentDone]);\n  const onSubmitComment = useCallback(() => {\n    if (!commentText || !commentText.trim()) {\n      return Modal.error({\n        content: '내용을 작성해주세요.'\n      });\n    }\n\n    if (!userData) {\n      return Modal.error({\n        content: '로그인한 사용자만 접근 가능합니다.',\n        okText: '확인'\n      });\n    }\n\n    if (type === 'comment') {\n      dispatch({\n        type: ADD_COMMENT_REQUEST,\n        data: {\n          content: commentText,\n          postId: postData.id,\n          userId: userData.id,\n          replyId\n        }\n      });\n    } else {\n      dispatch({\n        type: ADD_REPLY_REQUEST,\n        data: {\n          content: commentText,\n          postId: postData.id,\n          userId: userData.id,\n          replyId\n        }\n      });\n    }\n\n    setReplyId(-1);\n  }, [commentText, userData, addedCommentId, replyId, setReplyId]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmitComment,\n    layout: \"inline\",\n    style: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      children: /*#__PURE__*/_jsxDEV(Popover, {\n        trigger: \"click\",\n        placement: \"bottomRight\",\n        title: \"\\uC774\\uBAA8\\uD2F0\\uCF58\",\n        visible: visiblePopover,\n        content: /*#__PURE__*/_jsxDEV(PopoverEmoticon, {\n          setCommentText: setCommentText,\n          setVisiblePopover: setVisiblePopover\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 20\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(SmileOutlined, {\n          style: {\n            fontSize: 22,\n            opacity: 0.7,\n            marginRight: 8\n          },\n          onClick: () => setVisiblePopover(prev => !prev)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        width: '88%',\n        background: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        placeholder: placeholder,\n        style: {\n          resize: 'none',\n          width: '100%',\n          height: 55\n        },\n        bordered: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: addCommentLoading,\n        style: {\n          float: 'right',\n          height: 55\n        },\n        block: true,\n        children: \"\\uC791\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\nCommentForm.defaultProps = {\n  placeholder: '',\n  replyId: -1\n};\nCommentForm.propTypes = {\n  placeholder: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  replyId: PropTypes.number,\n  setReplyId: PropTypes.func.isRequired,\n  postData: PropTypes.object.isRequired,\n  postMutate: PropTypes.func.isRequired\n};\nexport default CommentForm;","map":{"version":3,"sources":["C:/programming/nodejs/utopia/client/components/CommentForm.js"],"names":["SmileOutlined","Button","Form","Input","Modal","Popover","PropTypes","React","useCallback","useEffect","useState","useDispatch","useSelector","useSWR","ADD_COMMENT_REQUEST","ADD_REPLY_REQUEST","fetcher","useInput","PopoverEmoticon","CommentForm","placeholder","type","replyId","setReplyId","postData","postMutate","dispatch","visiblePopover","setVisiblePopover","commentText","onChangeCommentText","setCommentText","addCommentDone","addCommentLoading","addedCommentId","removeCommentDone","removedCommentId","state","post","data","userData","Comments","id","userId","content","User","nickname","profile","filter","v","onSubmitComment","trim","error","okText","postId","display","justifyContent","alignItems","fontSize","opacity","marginRight","prev","width","background","resize","height","float","defaultProps","propTypes","string","isRequired","number","func","object"],"mappings":"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","sourcesContent":["import { SmileOutlined } from '@ant-design/icons';\r\nimport { Button, Form, Input, Modal, Popover } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useSWR from 'swr';\r\nimport { ADD_COMMENT_REQUEST, ADD_REPLY_REQUEST } from '../reducers/post';\r\nimport { fetcher } from '@utils/fetcher';\r\nimport useInput from '../hooks/useInput.ts';\r\nimport PopoverEmoticon from './PopoverEmoticon';\r\n\r\nconst CommentForm = ({ placeholder, type, replyId, setReplyId, postData, postMutate }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [visiblePopover, setVisiblePopover] = useState(false);\r\n\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\r\n\r\n  const { addCommentDone, addCommentLoading, addedCommentId, removeCommentDone, removedCommentId } = useSelector((state) => state.post);\r\n\r\n  const { data: userData } = useSWR('/api/user', fetcher);\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      if (type === 'comment') {\r\n        postMutate(\r\n          {\r\n            ...postData,\r\n            Comments: [\r\n              ...postData.Comments,\r\n              {\r\n                id: addedCommentId,\r\n                replyId: addedCommentId,\r\n                userId: userData.id,\r\n                content: commentText,\r\n                User: {\r\n                  id: userData.id,\r\n                  nickname: userData.nickname,\r\n                  profile: userData.profile,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          false\r\n        );\r\n      } else if (type === 'reply') {\r\n        postMutate();\r\n      }\r\n      setCommentText('');\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  useEffect(() => {\r\n    if (removeCommentDone) {\r\n      postMutate(\r\n        {\r\n          ...postData,\r\n          Comments: postData.Comments.filter((v) => v.id !== removedCommentId),\r\n        },\r\n        false\r\n      );\r\n    }\r\n  }, [removeCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    if (!commentText || !commentText.trim()) {\r\n      return Modal.error({\r\n        content: '내용을 작성해주세요.',\r\n      });\r\n    }\r\n\r\n    if (!userData) {\r\n      return Modal.error({\r\n        content: '로그인한 사용자만 접근 가능합니다.',\r\n        okText: '확인',\r\n      });\r\n    }\r\n\r\n    if (type === 'comment') {\r\n      dispatch({\r\n        type: ADD_COMMENT_REQUEST,\r\n        data: { content: commentText, postId: postData.id, userId: userData.id, replyId },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_REPLY_REQUEST,\r\n        data: { content: commentText, postId: postData.id, userId: userData.id, replyId },\r\n      });\r\n    }\r\n\r\n    setReplyId(-1);\r\n  }, [commentText, userData, addedCommentId, replyId, setReplyId]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment} layout=\"inline\" style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}>\r\n      <Form.Item>\r\n        <Popover\r\n          trigger=\"click\"\r\n          placement=\"bottomRight\"\r\n          title=\"이모티콘\"\r\n          visible={visiblePopover}\r\n          content={<PopoverEmoticon setCommentText={setCommentText} setVisiblePopover={setVisiblePopover} />}\r\n        >\r\n          <SmileOutlined style={{ fontSize: 22, opacity: 0.7, marginRight: 8 }} onClick={() => setVisiblePopover((prev) => !prev)} />\r\n        </Popover>\r\n      </Form.Item>\r\n      <Form.Item style={{ width: '88%', background: 'white' }}>\r\n        <Input.TextArea\r\n          value={commentText}\r\n          onChange={onChangeCommentText}\r\n          placeholder={placeholder}\r\n          style={{ resize: 'none', width: '100%', height: 55 }}\r\n          bordered\r\n        />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\" loading={addCommentLoading} style={{ float: 'right', height: 55 }} block>\r\n          작성\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.defaultProps = {\r\n  placeholder: '',\r\n  replyId: -1,\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  placeholder: PropTypes.string,\r\n  type: PropTypes.string.isRequired,\r\n  replyId: PropTypes.number,\r\n  setReplyId: PropTypes.func.isRequired,\r\n  postData: PropTypes.object.isRequired,\r\n  postMutate: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}