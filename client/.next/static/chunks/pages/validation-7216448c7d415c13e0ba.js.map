{"version":3,"sources":["webpack://_N_E/./pages/validation.tsx","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?3e2c","webpack://_N_E/./node_modules/next/link.js","webpack://_N_E/../../client/link.tsx","webpack://_N_E/../../client/use-intersection.tsx"],"names":["validation","router","useRouter","token","query","useState","isValidated","setIsValidated","isLoading","setIsLoading","visibleInput","setVisibleInput","useInput","email","onChangeEmail","useEffect","fetcherPatch","then","console","log","error","onClickRequest","useCallback","onFinish","axios","post","Modal","success","title","content","okText","replace","href","layout","type","onChange","value","placeholder","htmlType","loading","onClick","window","__NEXT_P","push","module","exports","prefetched","prefetch","isLocalURL","err","curLocale","options","props","p","pathname","React","resolveHref","as","resolvedAs","children","child","Children","childRef","useIntersection","rootMargin","setRef","el","setIntersectionRef","shouldPrefetch","isVisible","locale","isPrefetched","childProps","ref","e","nodeName","event","target","isModifiedEvent","scroll","shallow","document","linkClicked","priority","localeDomain","getDomainLocale","addBasePath","addLocale","isDisabled","unobserve","id","instance","observers","elements","observer","IntersectionObserver","entries","entry","callback","createObserver","observe","setVisible","hasIntersectionObserver"],"mappings":"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","file":"static/chunks/pages/validation-7216448c7d415c13e0ba.js","sourcesContent":["import { Button, Input, Form, Modal } from 'antd';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'next/router';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport useInput from '@hooks/useInput';\r\nimport { fetcherPatch } from '@utils/fetcher';\r\nimport Link from 'next/link';\r\n\r\nconst validation = () => {\r\n  const router = useRouter();\r\n  const { token } = router.query;\r\n  const [isValidated, setIsValidated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [visibleInput, setVisibleInput] = useState(false);\r\n  const [email, onChangeEmail] = useInput('');\r\n\r\n  useEffect(() => {\r\n    fetcherPatch(token ? '/api/user/validation' : null, { token })\r\n      .then(() => {\r\n        setIsValidated(true);\r\n        console.log('good');\r\n      })\r\n      .catch((error) => {\r\n        setIsValidated(false);\r\n        console.error(error);\r\n      });\r\n  }, [token]);\r\n\r\n  const onClickRequest = useCallback(() => {\r\n    setVisibleInput(true);\r\n  }, []);\r\n\r\n  const onFinish = useCallback(() => {\r\n    setIsLoading(true);\r\n    axios\r\n      .post('/api/user/mail', { email })\r\n      .then(() => {\r\n        Modal.success({\r\n          title: '이메일이 전송되었습니다',\r\n          content: '이메일이 전송되었습니다. 메일확인을 부탁드려요!',\r\n          okText: '확인',\r\n        });\r\n        setIsLoading(false);\r\n        router.replace('/');\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        Modal.error({\r\n          title: '🤔 메일주소를 확인해 주세요.',\r\n          content: '가입되지 않았거나 이미 인증이 완료된 계정입니다.',\r\n          okText: '확인',\r\n        });\r\n        setIsLoading(false);\r\n      });\r\n  }, [email]);\r\n\r\n  if (!isValidated) {\r\n    return (\r\n      <>\r\n        <div>인증이 완료되었거나, 유효시간이 지났습니다.</div>\r\n        <div>인증을 다시 시도하려면, 인증메일을 요청해 주세요!</div>\r\n        {visibleInput ? (\r\n          <Form onFinish={onFinish} layout=\"vertical\">\r\n            <Input\r\n              type=\"email\"\r\n              onChange={onChangeEmail}\r\n              value={email}\r\n              placeholder=\"가입된 이메일을 정확히 입력해 주세요.\"\r\n            />\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n              인증메일 보내기\r\n            </Button>\r\n          </Form>\r\n        ) : (\r\n          <Button type=\"primary\" onClick={onClickRequest}>\r\n            인증메일 요청\r\n          </Button>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>인증됨!</div>\r\n      <Link href=\"/\">\r\n        <a>홈으로</a>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default validation;\r\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/validation\",\n        function () {\n          return require(\"private-next-pages/validation.tsx\");\n        }\n      ]);\n    ","module.exports = require('./dist/client/link')\n","import React, { Children, useEffect } from 'react'\nimport { UrlObject } from 'url'\nimport {\n  addBasePath,\n  addLocale,\n  getDomainLocale,\n  isLocalURL,\n  NextRouter,\n  PrefetchOptions,\n  resolveHref,\n} from '../next-server/lib/router/router'\nimport { useRouter } from './router'\nimport { useIntersection } from './use-intersection'\n\ntype Url = string | UrlObject\ntype RequiredKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? never : K\n}[keyof T]\ntype OptionalKeys<T> = {\n  [K in keyof T]-?: {} extends Pick<T, K> ? K : never\n}[keyof T]\n\nexport type LinkProps = {\n  href: Url\n  as?: Url\n  replace?: boolean\n  scroll?: boolean\n  shallow?: boolean\n  passHref?: boolean\n  prefetch?: boolean\n  locale?: string | false\n}\ntype LinkPropsRequired = RequiredKeys<LinkProps>\ntype LinkPropsOptional = OptionalKeys<LinkProps>\n\nconst prefetched: { [cacheKey: string]: boolean } = {}\n\nfunction prefetch(\n  router: NextRouter,\n  href: string,\n  as: string,\n  options?: PrefetchOptions\n): void {\n  if (typeof window === 'undefined' || !router) return\n  if (!isLocalURL(href)) return\n  // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n  router.prefetch(href, as, options).catch((err) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err\n    }\n  })\n  const curLocale =\n    options && typeof options.locale !== 'undefined'\n      ? options.locale\n      : router && router.locale\n\n  // Join on an invalid URI character\n  prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')] = true\n}\n\nfunction isModifiedEvent(event: React.MouseEvent): boolean {\n  const { target } = event.currentTarget as HTMLAnchorElement\n  return (\n    (target && target !== '_self') ||\n    event.metaKey ||\n    event.ctrlKey ||\n    event.shiftKey ||\n    event.altKey || // triggers resource download\n    (event.nativeEvent && event.nativeEvent.which === 2)\n  )\n}\n\nfunction linkClicked(\n  e: React.MouseEvent,\n  router: NextRouter,\n  href: string,\n  as: string,\n  replace?: boolean,\n  shallow?: boolean,\n  scroll?: boolean,\n  locale?: string | false\n): void {\n  const { nodeName } = e.currentTarget\n\n  if (nodeName === 'A' && (isModifiedEvent(e) || !isLocalURL(href))) {\n    // ignore click for browser’s default behavior\n    return\n  }\n\n  e.preventDefault()\n\n  //  avoid scroll for urls with anchor refs\n  if (scroll == null) {\n    scroll = as.indexOf('#') < 0\n  }\n\n  // replace state instead of push if prop is present\n  router[replace ? 'replace' : 'push'](href, as, {\n    shallow,\n    locale,\n    scroll,\n  }).then((success: boolean) => {\n    if (!success) return\n    if (scroll) {\n      // FIXME: proper route announcing at Router level, not Link:\n      document.body.focus()\n    }\n  })\n}\n\nfunction Link(props: React.PropsWithChildren<LinkProps>) {\n  if (process.env.NODE_ENV !== 'production') {\n    function createPropError(args: {\n      key: string\n      expected: string\n      actual: string\n    }) {\n      return new Error(\n        `Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` +\n          (typeof window !== 'undefined'\n            ? \"\\nOpen your browser's console to view the Component stack trace.\"\n            : '')\n      )\n    }\n\n    // TypeScript trick for type-guarding:\n    const requiredPropsGuard: Record<LinkPropsRequired, true> = {\n      href: true,\n    } as const\n    const requiredProps: LinkPropsRequired[] = Object.keys(\n      requiredPropsGuard\n    ) as LinkPropsRequired[]\n    requiredProps.forEach((key: LinkPropsRequired) => {\n      if (key === 'href') {\n        if (\n          props[key] == null ||\n          (typeof props[key] !== 'string' && typeof props[key] !== 'object')\n        ) {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: props[key] === null ? 'null' : typeof props[key],\n          })\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _: never = key\n      }\n    })\n\n    // TypeScript trick for type-guarding:\n    const optionalPropsGuard: Record<LinkPropsOptional, true> = {\n      as: true,\n      replace: true,\n      scroll: true,\n      shallow: true,\n      passHref: true,\n      prefetch: true,\n      locale: true,\n    } as const\n    const optionalProps: LinkPropsOptional[] = Object.keys(\n      optionalPropsGuard\n    ) as LinkPropsOptional[]\n    optionalProps.forEach((key: LinkPropsOptional) => {\n      const valType = typeof props[key]\n\n      if (key === 'as') {\n        if (props[key] && valType !== 'string' && valType !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: valType,\n          })\n        }\n      } else if (key === 'locale') {\n        if (props[key] && valType !== 'string') {\n          throw createPropError({\n            key,\n            expected: '`string`',\n            actual: valType,\n          })\n        }\n      } else if (\n        key === 'replace' ||\n        key === 'scroll' ||\n        key === 'shallow' ||\n        key === 'passHref' ||\n        key === 'prefetch'\n      ) {\n        if (props[key] != null && valType !== 'boolean') {\n          throw createPropError({\n            key,\n            expected: '`boolean`',\n            actual: valType,\n          })\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _: never = key\n      }\n    })\n\n    // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const hasWarned = React.useRef(false)\n    if (props.prefetch && !hasWarned.current) {\n      hasWarned.current = true\n      console.warn(\n        'Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://err.sh/vercel/next.js/prefetch-true-deprecated'\n      )\n    }\n  }\n  const p = props.prefetch !== false\n\n  const router = useRouter()\n  const pathname = (router && router.pathname) || '/'\n\n  const { href, as } = React.useMemo(() => {\n    const [resolvedHref, resolvedAs] = resolveHref(pathname, props.href, true)\n    return {\n      href: resolvedHref,\n      as: props.as\n        ? resolveHref(pathname, props.as)\n        : resolvedAs || resolvedHref,\n    }\n  }, [pathname, props.href, props.as])\n\n  let { children, replace, shallow, scroll, locale } = props\n\n  // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag\n  if (typeof children === 'string') {\n    children = <a>{children}</a>\n  }\n\n  // This will return the first child, if multiple are provided it will throw an error\n  const child: any = Children.only(children)\n  const childRef: any = child && typeof child === 'object' && child.ref\n\n  const [setIntersectionRef, isVisible] = useIntersection({\n    rootMargin: '200px',\n  })\n  const setRef = React.useCallback(\n    (el: Element) => {\n      setIntersectionRef(el)\n      if (childRef) {\n        if (typeof childRef === 'function') childRef(el)\n        else if (typeof childRef === 'object') {\n          childRef.current = el\n        }\n      }\n    },\n    [childRef, setIntersectionRef]\n  )\n  useEffect(() => {\n    const shouldPrefetch = isVisible && p && isLocalURL(href)\n    const curLocale =\n      typeof locale !== 'undefined' ? locale : router && router.locale\n    const isPrefetched =\n      prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')]\n    if (shouldPrefetch && !isPrefetched) {\n      prefetch(router, href, as, {\n        locale: curLocale,\n      })\n    }\n  }, [as, href, isVisible, locale, p, router])\n\n  const childProps: {\n    onMouseEnter?: React.MouseEventHandler\n    onClick: React.MouseEventHandler\n    href?: string\n    ref?: any\n  } = {\n    ref: setRef,\n    onClick: (e: React.MouseEvent) => {\n      if (child.props && typeof child.props.onClick === 'function') {\n        child.props.onClick(e)\n      }\n      if (!e.defaultPrevented) {\n        linkClicked(e, router, href, as, replace, shallow, scroll, locale)\n      }\n    },\n  }\n\n  childProps.onMouseEnter = (e: React.MouseEvent) => {\n    if (!isLocalURL(href)) return\n    if (child.props && typeof child.props.onMouseEnter === 'function') {\n      child.props.onMouseEnter(e)\n    }\n    prefetch(router, href, as, { priority: true })\n  }\n\n  // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n  // defined, we specify the current 'href', so that repetition is not needed by the user\n  if (props.passHref || (child.type === 'a' && !('href' in child.props))) {\n    const curLocale =\n      typeof locale !== 'undefined' ? locale : router && router.locale\n\n    const localeDomain = getDomainLocale(\n      as,\n      curLocale,\n      router && router.locales,\n      router && router.domainLocales\n    )\n\n    childProps.href =\n      localeDomain ||\n      addBasePath(addLocale(as, curLocale, router && router.defaultLocale))\n  }\n\n  return React.cloneElement(child, childProps)\n}\n\nexport default Link\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport requestIdleCallback from './request-idle-callback'\n\ntype UseIntersectionObserverInit = Pick<IntersectionObserverInit, 'rootMargin'>\ntype UseIntersection = { disabled?: boolean } & UseIntersectionObserverInit\ntype ObserveCallback = (isVisible: boolean) => void\ntype Observer = {\n  id: string\n  observer: IntersectionObserver\n  elements: Map<Element, ObserveCallback>\n}\n\nconst hasIntersectionObserver = typeof IntersectionObserver !== 'undefined'\n\nexport function useIntersection<T extends Element>({\n  rootMargin,\n  disabled,\n}: UseIntersection): [(element: T | null) => void, boolean] {\n  const isDisabled: boolean = disabled || !hasIntersectionObserver\n\n  const unobserve = useRef<Function>()\n  const [visible, setVisible] = useState(false)\n\n  const setRef = useCallback(\n    (el: T | null) => {\n      if (unobserve.current) {\n        unobserve.current()\n        unobserve.current = undefined\n      }\n\n      if (isDisabled || visible) return\n\n      if (el && el.tagName) {\n        unobserve.current = observe(\n          el,\n          (isVisible) => isVisible && setVisible(isVisible),\n          { rootMargin }\n        )\n      }\n    },\n    [isDisabled, rootMargin, visible]\n  )\n\n  useEffect(() => {\n    if (!hasIntersectionObserver) {\n      if (!visible) requestIdleCallback(() => setVisible(true))\n    }\n  }, [visible])\n\n  return [setRef, visible]\n}\n\nfunction observe(\n  element: Element,\n  callback: ObserveCallback,\n  options: UseIntersectionObserverInit\n): () => void {\n  const { id, observer, elements } = createObserver(options)\n  elements.set(element, callback)\n\n  observer.observe(element)\n  return function unobserve(): void {\n    elements.delete(element)\n    observer.unobserve(element)\n\n    // Destroy observer when there's nothing left to watch:\n    if (elements.size === 0) {\n      observer.disconnect()\n      observers.delete(id)\n    }\n  }\n}\n\nconst observers = new Map<string, Observer>()\nfunction createObserver(options: UseIntersectionObserverInit): Observer {\n  const id = options.rootMargin || ''\n  let instance = observers.get(id)\n  if (instance) {\n    return instance\n  }\n\n  const elements = new Map<Element, ObserveCallback>()\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      const callback = elements.get(entry.target)\n      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0\n      if (callback && isVisible) {\n        callback(isVisible)\n      }\n    })\n  }, options)\n\n  observers.set(\n    id,\n    (instance = {\n      id,\n      observer,\n      elements,\n    })\n  )\n  return instance\n}\n"],"sourceRoot":""}